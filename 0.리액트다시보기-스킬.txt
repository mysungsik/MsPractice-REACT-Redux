[INDEX]================================================================================================================================
1. Card 등에, 동적 스타일 추가하기
2. 여러개의 State 동시에 관리하기 [각각]
3. 여러개의 State "객체를 사용하여" "한 State로" 관리하기 [객체로 한번에] with "prev"
4. 상향식 컴포넌트 통신(자식에서 부모로) ***
5. 여러번에 걸친 상향식 컴포넌트 통신(자식에서 부모로, 더 위로!) ***
6. 날짜 필터하기 with, getFullYear(), getMonth(), toString() !
7. 조건부 렌더하기 [ &&, 삼항연산자, 변수에 저장하기, 완전히새로운 return 을 렌더하기]
8. 날짜별 차트 만들기
9. 컴포넌트 함수에서 style 관리하기
10. 컴포넌트 함수에서 동적 style 관리하기
11. 동적 className 설정하기
12. "리액트 포털"이란?
13. "리액트 포털"을 통해, 오버레이 컨텐츠를 표현하기(Modal 등 화면을 덮는 오버레이)
14. useEffect를 이용하여, 디바운싱을 만들기 with "클린업함수", Check Validation


[SKILL]==============================================================================================================================

1. Card 등에, 동적 스타일 추가하기

    const styles = "card" + {props.style}

    retrun (
        <div className={styles}>
            {props.children}
        </div>
    )

   ==>  외부에서, Card 를 import 할때,
        styles 를 다르게 주면, 
        다른 className이 적용되어,
        다른 스타일을 가지게되겠다.

2. 여러개의 State 동시에 관리하기 [각각]

        const [title, setTitle] = useState("none");
        const [amount, setAmount] = useState("");
        const [date, setDate] = useState("");

        function submitHandler(e) {
            e.preventDefault();
            console.log(title, amount, date);
        }

        function titleChangeHandler(e) {
            setTitle(e.target.value);
        }
        function amountChangeHandler(e) {
            setAmount(e.target.value);
        }
        function dateChangeHandler(e) {
            setDate(e.target.value);
        }

3. 여러개의 State "객체를 사용하여" "한 State로" 관리하기 [객체로 한번에] with "prev"
    : prev 파라미터를 사용하면, 기존의 상태를 가져온다는 것을 활용

        function ExpenseForm() {
            const [userInput, setUserInput] = useState({
                title: "", 
                amount: "", 
                date: "",
            });
        
            function submitHandler(e) {
                e.preventDefault();
                console.log(userInput.title, userInput.amount, userInput.date);
            }
        
            function titleChangeHandler(e) {
                setUserInput((prev) => ({
                    ...prev,
                    title: e.target.value,
                }));
            }
        
            function amountChangeHandler(e) {
                setUserInput((prev) => ({
                    ...prev,
                    amount: e.target.value,
                }));
            }
        
            function dateChangeHandler(e) {
                setUserInput((prev) => ({
                    ...prev,
                    date: e.target.value,
                }));
            }
        

4. 상향식 컴포넌트 통신(자식에서 부모로) ***

    <원리> 
            "부모" 에서 "정의한 함수" 를 "자식 컴포넌트에게 넘긴다."

            "자식 컴포넌트"에서 "부모에서 정의한 함수를 실행한다."

            "자식 컴포넌트로 간 함수는", 부모가 "함수의 포인터"를 넘긴 것이기 때문에,

            "자식 컴포넌트에서 실행하면", "자식 컴포넌트의 값을 가지고 부모 컴포넌트 안에서 실행된다."

    <예시>

        부모컴포넌트 : NewExpense
        자식컴포넌트 : Expense-Form

        <NewExpense> ==========================================

            function NewExpense() {
    
-               function saveExpenseDataHandler(enteredExpenseData) {
                    const expenseData = {
                        ...enteredExpenseData,
                        id: Math.random().toString(),
                    };
                    console.log(expenseData);
                }
            
                return (
                    <div className={styles.maindiv}>
    -                   <ExpenseForm onSaveExpenseData={saveExpenseDataHandler} />
                    </div>
                );
            }

            export default NewExpense;



        <Expense-Form> ==========================================

            function ExpenseForm(props){
                ...

                function submitHandler(e) {
                    e.preventDefault();
                
                    setUserInput({
                      title: "",
                      amount: "",
                      date: "",
                    });
                
-                   props.onSaveExpenseData(userInput);
                }
            }
          

    => "자식 컴포넌트의 userInput"을 가지고 "자식에서 함수를 실행시키면", 
        포인터를 넘긴 것이기 때문에, 실질적으로 "부모 컴포넌트의 함수에서 실행되어"
        "자식으로 넘겨받은 값을 저장 할 수 있다."

    <결과>

        NewExpense.js:10 

        {title: 'dfg', amount: '123', date: '', id: '0.3271938085592352'}

        => 실행 장소가 사실 "부모 컴포넌트"인 것을 알 수 있다.

    
5. 여러번에 걸친 상향식 컴포넌트 통신(자식에서 부모로, 더 위로!) ***

    : 상향식 컴포넌트 통신을 이용하여, App.js 까지 올려보자


        <App.js> ==========================================

                export default function App() {

-                   function saveExpenseDataHandler(data) {
                        const fromChild = data;
                        console.log(fromChild);
                    }

                    return (
                        <div className="App">
                            <h1> ms</h1>
    -                       <NewExpense onSaveChildData={saveExpenseDataHandler} />
                            <Expense />
                        </div>
                    );
                }
    
        <NewExpense> ==========================================

                function NewExpense(props) {

-                   function saveExpenseDataHandler(enteredExpenseData) {
                        const expenseData = {
                            ...enteredExpenseData,
                            id: Math.random().toString(),
                        };
                
-                       props.onSaveChildData(expenseData);
                    }

        <Expense-Form> ==========================================

                function ExpenseForm(props){
                    ...

                    function submitHandler(e) {
                        e.preventDefault();
                    
                        setUserInput({
                            title: "",
                            amount: "",
                            date: "",
                        });
                    
 -                      props.onSaveExpenseData(userInput);
                    }
                }
          

    <결과>

        App.js:7 

        {title: 'dfgdfg', amount: '1234', date: '2022-11-29', id: '0.5602308443105115'}

6. 날짜 필터하기 with, getFullYear(), getMonth(), toString() !

    date = "2020-10-5"

    1. [year 뽑고, String 으로]     ** "String 으로 바꿔주는게 중요하다"

        new Date(item.date).getFullYear().toString()

    2. filter 처리하기

7. 조건부 렌더하기 [ &&, 삼항연산자, 변수에 저장하기, 완전히새로운 return 을 렌더하기]

    1. &&
            {true && <p> hi <p>}

    2. 삼항연산자
    
            {true ? <p> hi <p> : <p> bye </p>}

    3. 변수에 저장

            let sentence = <p> hi <p>

            if(조건){
                sentence = <p> bye <p>
            }

            {sentence}

        ** "복잡하다면, 변수에 저장을 사용 하는 것이 가장 가독성이 좋다."

    4. 완전히 새로운 retrun 을 렌더하기

            <컴포넌트>

                function newComponent(props){

                    const {...} = props

                    if(...){
                        retrun(
                            <div> BYE </div>
                        )
                    }
                    retrun (
                        <div> hi ms </div>
                        <div> say hi </div>
                    )
                }

            <부모>

                <newComponent />

    => "복잡한 컴포넌트", 혹은 "아무것도 없다는 메시지", 둘 중 하나만 출력해야 한다면,
        차라리, 새 컴포넌트를 만들어서, "안에 다른 반환값" 을 넣고, 부모에서 렌더하는 방법이 좋다.


        [너무 복잡하다면] 아웃소싱을 하는것, 그것이 덜 복잡하다
        

8. 날짜별 차트 만들기

    1) Chart, ChartBar 를 준비한다.

    2) Chart에, data(title, amount, date 등...)
                month(label : 1~12월, 그에 따른 밸류) 를 준비한다.

    3) select, option 으로 연도를 정하게 만든다.

    4) 필터된 연도에 따라, 필터된 값만 ChartBar에 들어가게 한다.

    5) 넘겨줄 값은, "각 개월", "개월에 따른 총 amount", "max amount"

        [개월에 따른 총 amount]는, 
            for 처리를 통해, data의 date 를 getMonth 로 뽑아,
            각 month에 해당하는 value 를, [배열 INDEX] 처럼 활용해, 그 때의 [month value 를 바꿔준다].

                        * "chartData 안에는, title, amount, date 가 들어있다."

                    const { chartData } = props;

                    const months = [
                    { label: "1월", value: 0 },
                            ...
                    { label: "12월", value: 0 },
                    ];
                
                
                    for (const chart of chartData) {
                        const monthData = new Date(chart.date).getMonth();
                        months[monthData].value = months[monthData].value + chart.amount;
                    }

                => chartData의 각 항목마다, month 를 추출, 
                    month 에 해당하는 INDEX 의 value 를
                    해당 value에 추가하여,

                    "최종적인 months" => [각 월]에 따른 [총 amount] 를 만든다.
    
    6) 넘겨준다.

    7)  넘겨받은 chartBar 는

        "얼마나 채워질지, % 로 바꿔서", "CSS를 조작하는 방법으로, 차트가 얼마나 채워질지 정리한다."

                function ChartBar(props) {
                    
                    const { value, maxValue, label } = props;
                
                    let barFillWidth = "0%";
                
                    if (maxValue > 0) {
                        barFillWidth = Math.round((value / maxValue) * 100) + "%";
                    }
                
                    // 
                    return (
                    <div className={styles.maindiv}>
                        <div className={styles.inner}>
                        <div className={styles.fill} style={{ width: barFillWidth }}></div>
                        </div>
                        <div className={styles.label}>{label}</div>
                    </div>
                    );
                }
                export default ChartBar;


                
        ** [ style = {{ width: barFillWidth }} ]

            "style을 컴포넌트 함수에서 정의할때"에는, "객체 안에 넣어서 사용"해야 하므로, style={ } "이것 안에, 객체(css style객체)가 하나 더 들어간 것"이다
            특별한 구문이 아니라, CSS 스타일을 REACT에서 만질때, 객체를 써야하기 때문에 그런것이다.

        ** transition 을 CSS에 넣으면 부드러운 움직임을 확인 할 수 있다.

9. 컴포넌트 함수에서 style 관리하기
    
    <label style={{ color: "red", fontSize: "40px" , ...}}> Title </label>

10. 컴포넌트 함수에서 동적 style 관리하기

    <label style={{ color: 조건 ? "red" : "blue" }}> Title </label>
        

11. 동적 className 설정하기

    1) "" 없이 설정
        const condition = true;
        let dynamaicStyle;

        if (conditions) {
            dynamaicStyle = styles.red;
        } else {
            dynamaicStyle = styles.blue;
        }

        return (
            <form className={styles.maindiv}>
-               <label className={dynamaicStyle}> Title </label>

        ** "" 없음을 명심


    2) "" 사용하고 설정 (String 형태)  ==> styles[dynamaicStyle]

        : 대괄호를 사용하면, ""(String 형태) 도, CSS의 클래스이름으로 사용할 수 있다.

        const condition = true;
        let dynamaicStyle;

        if (conditions) {
            dynamaicStyle = "red";
        } else {
            dynamaicStyle = "blue";
        }

        return (
            <form className={styles.maindiv}>
-               <label className={styles[dynamaicStyle]}> Title </label>

    3) 삼항연산자와 합칠 수도 있다.

12. 여러개의 className 추가하기
    
    ` className = {${} ${} ${} ...} ` 하여 추가한다.

    <li className={`${styles.cart} ${styles.bump}`} onClick={toggleModal}>

                
12. "리액트 포털"이란?

    "Modal" 같은 "오버레이" 들은, 사실상,해당 HTML 과는 조금 다른 곳에서 실행되어어한다.

    전혀 다른 종류의 컴포넌트이면서, 화면을 분리시키기도 하고, "연관이 전혀 없음에도 한 컴포넌트 안에 같이 있을 수도 있다."

    마치 로그인 성공시 나오는 Modal 이, 로그인과는 전혀 관계 없는 컴포넌트 인 것 처럼
        (그렇지만 로그인 컴포넌트 한켠에 들어가있다.)

    이것을 방지하기위해, "리액트 포털"을 사용한다.

    "리액트 포털"은, "원하는 공간"에서, "원하는 JSX코드로 만든 컴포넌트"를 렌더하는것

        ** Modal 을 띄우면, "컴포넌트 함수의 한켠"이 아니고, body의 직계 자식이 되도록, 만들 수 있다.


13. "리액트 포털"을 통해, 오버레이 컨텐츠를 표현하기(Modal 등 화면을 덮는 오버레이)

    [포털을 사용하기에 필요한것] =>  "컴포넌트", "컴포넌트를 렌더할 장소"


    1) 기존의 Modal

        1. 모달을 만든다.
        2. 사용할 곳에서, modal 을 띄우거나, 제거하는 함수를 만든다.
        3. 모달 컴포넌트로 함수 포인터를 넘겨, 그곳에서도, 띄우거나, 제거할 수 있게 만든다. 

            < Modal 사용할 곳>

                import { useState } from "react";
                import Modal from "./components/UI/Modal";

                export default function App() {
                    const [modal, setModal] = useState(false);
                    
    -               function toggleModal() {
                        setModal((prev) => !prev);
                    }

                    return (
                        <div className="App">
                            <button onClick={toggleModal}> 모달 띄우기</button>
    -                       {modal && <Modal closeModal={toggleModal} />}

                            ...

            < Modal >

                import styles from "./Modal.module.css";

                function Modal(props) {
    -               const { closeModal } = props;

                    return (
                        <div className={styles.modal}>
    -                       <div className={styles.backDrop} onClick={closeModal}></div>
    -                       <div className={styles.modalContent} onClick={closeModal}>
                                <h1> 이것은 Modal</h1>
                                <h2> 모달이 띄워졌습니다. 아무곳이나 눌러 제거하세요</h2>
                            </div>
                        </div>
                    );
                }
                export default Modal;



    2) 포탈을 사용한 Modal

        1. 모달을 만든다.
        2. 모달을 만들때, 한 컴포넌트 함수에 전부 넣지 말고, "한 파일"에 "여러 컴포넌트 함수"를 만들어, "분리시킨다."
        3. index.html 파일에, "modal 용 root" 를 만든다. (id로 DOM 에 접근해 안착시키므로, id 를 잘 적어준다.)
        4. "react-dom"에 접근하여 하여, "createPortal()" 메서드를 import한다
        5. "createPortal()" 을 사용하여, "modal 용 root" 에서 "렌더되게 만든다".

        6. props 는 "실행하는곳" -> "Modal" -> "Modal 안의 여러 컴포넌트" 로 props drilling 한다.



        < index.html > ======================================================================

                ...
            <body>
                <noscript>You need to enable JavaScript to run this app.</noscript>
-               <div id="root-modal-backdrop"></div>
-               <div id="root-modal-content"></div>
                <div id="root"></div>
            </body>
            </html>

        < Modal 사용 할 곳> ======================================================================
        
            import { useState } from "react";
            import Modal from "./components/UI/Modal";

            export default function App() {
                const [modal, setModal] = useState(false);
                
-                   function toggleModal() {
                    setModal((prev) => !prev);
                }

                return (
                    <div className="App">
                        <button onClick={toggleModal}> 모달 띄우기</button>
-                       {modal && <Modal closeModal={toggleModal} />}

                        ...


        < Modal > ======================================================================

                import styles from "./Modal.module.css";
-               import { createPortal } from "react-dom";                                   // createPortal 을 import

-               function ModalBackDrop(props) {                                             // 각각의 파트를 분리 (선택사항)
                    const { closeModal } = props;
                    return <div className={styles.backDrop} onClick={closeModal}></div>;
                }

-               function ModalContent(props) {                                               // 각각의 파트를 분리 (선택사항)
                    const { closeModal } = props;
                    return (
                        <div className={styles.modalContent} onClick={closeModal}>
                            <h1> 이것은 Modal</h1>
                            <h2> 모달이 띄워졌습니다. 아무곳이나 눌러 제거하세요</h2>
                        </div>
                    );
                }

                function Modal(props) {
                    const { closeModal } = props;

                    return (
                        <div>
-                           {createPortal( <ModalBackDrop closeModal={closeModal} /> , document.getElementById("root-modal-backdrop") )}
-                           {createPortal( <ModalContent closeModal={closeModal} /> , document.getElementById("root-modal-content") )}
                        </div>
                    );
                }

                export default Modal;

            ==> [createPortal] 은, [첫번째 인자]로, 렌더될 "컴포넌트 함수(렌더 된 형태)"를 받고, [두번째 인자]로, "컴포넌트를 렌더할 장소" 를 받는다.

            ==> "App.js 에서, Modal 을 실행시키면", "Modal" 은 각 파트(혹은 뭉쳐진 하나의 파트)를 "portal 하여, index.html 의 root div 에서 실행시킨다".

            ==> "props"는 "App.js 에서 Modal 에만 전달"했으므로, "ModalContent" 와 "ModalBackDrop" 은 "Modal 에서 props 를 받아 사용"된다.


            

14. useEffect를 이용하여, 디바운싱을 만들기 with "클린업함수", Check Validation

[목적] : "중간에 타자를 치다가, 멈추면 그 이후에, Validation Check 를 하게 한다."
        : "타이핑 중간에는 Validation Check 를 하지 않는다."
        
1) setTimeout 을 이용하여, 몇 초 후에, state에 기록되게 한다.

2) useEffect에, 종속성을 추가하여, setTimeout 함수가, 조건부 실행되게 한다.

3) 만약 중간에, "시간이 다되기전, 새로운 setTimeout이 시작되게 되면(다시 타이핑을 시작하면)",
    "클린업함수" 를 이용하여, "setTimeout 의 흘러가던 시간을 reset"한다.

    => 결국 "중간에 멈추지 않으면, setTimeout의 시간은 다시 reset 되고", 최종적으로 한번만 "setTimeout의 콜백함수가 실행되게 만드는 것"이다.

    import { useEffect, useState } from "react";

    function Practice() {
        const [name, setName] = useState("name");

        function nameChangeHandler(e) {
            setName(() => e.target.value);
        }

        useEffect(() => {
            const setTime = setTimeout(() => {
                if (name == "ms") {
                    console.log("correct!");
                } else {
                    console.log("wrong!");
                }
            }, 2000);

            return () => {
                clearTimeout(setTime);
            };
        }, [name]);

        return (
            <div>
                <input
                    type={"text"}
                    value={name}
                    onChange={(e) => nameChangeHandler(e)}
                />
            </div>
        );
        }

    export default Practice;





