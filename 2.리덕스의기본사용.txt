0. redux 공식홈페이지

    : https://ko.redux.js.org/introduction/getting-started

1. npm i redux, npm i react-redux

    : https://www.npmjs.com/package/redux


    리덕스는 자바스크립트에서도 쓸 수 있는 "리액트 만을 위한 패키지가 아니다"
    "리덕스와 리액트를 편하게 이용하기 위해," react-redux 패키지를 설치한다.

3. createStore 를 통해, redux용 store 를 만든다.

    <기본사용>

        import { createStore } from "redux";  

        const xx = (state,action) =>{
            ...
            if (action.type === "XXX") {
                return ...
            }

            return ...
        }


    < /src/store/index.js >

        import { createStore } from "redux";                            // 1. createStore 를 import

        const counterReducer = (state = { counter: 0 }, action) => {     // 2. 리듀서 함수를 만든다. (마치, useReducer 처럼) (초기값 지정은, 맘대로)
            if (action.type === "INCREMENT") {
                return {
                    counter: state.counter + 1,
                };
            }
            if (action.type === "DECREMENT") {
                return {
                    counter: state.counter - 1,
                };
            }

            return state;
        };

        const store = createStore(counterReducer);                          // 3.리듀서 함수를 토대로, store 를 만든다. (마치 useReducer 를 사용하듯)
                          
        export default store;

        
    ==> "이제, 리액트 앱과, store 를 연결하여, 리액트 앱에서 사용할 수 있도록 만든다".  [store 를, 리액트 엡에 공급한다!] 
        "index.js" 로 가자 [앱을 감싸는 최상위 컴포넌트로!]

4. index.js 에서, store 를 앱 전역으로 공급한다 with. "react-redux" [마치 context 처럼]

    < index.js >

        import React from "react";
        import ReactDOM from "react-dom/client";
        import { Provider } from "react-redux";
        import store from "./store/index";

        import "./index.css";
        import App from "./App";

        const root = ReactDOM.createRoot(document.getElementById("root"));
        root.render(
            <Provider store={store}>
                <App />
            </Provider>
        );

    ==> context 와 마찬가지로, Provider 로 공급하려면, 그 안의 value 를 알아야 공급을 한다.
        그 공급 값을 정해주는 코드가 "store" 이다.  (context 에서는 value 였다.)

        store 코드 로 "공급할 저장소(값)을 지정"할 수 있는데, 그 안에서 공급할 것이 우리가 방금 만든, "store" 컴포넌트(저장소) 이다.

5. 리액트 컴포넌트에서 사용할때, "react-redux" 에서 useStore 혹은 useSelector 훅을 import 하여 사용한다. [useStore or useSelector]

    useStore는 "저장소에 전부 관여"하는 것이고
    useSelector 는 저장소의 "우리가 원하는 파트"를 "선택하여 관여"하는 것이다.

    "useSelector 를 추천한다."

        < useSelector >
            import classes from "./Counter.module.css";
            import { useSelector } from "react-redux";

            const Counter = () => {
                const counter = useSelector((state) => state.counter);      // useSelector 를 사용한다.

                console.log(counter);

                const toggleCounterHandler = () => {};

                return (
                    <main className={classes.counter}>
                        <h1>Redux Counter</h1>
                        <div className={classes.value}>-- COUNTER VALUE --</div>
                        <button onClick={toggleCounterHandler}>Toggle Counter</button>
                        </main>
                );
            };

            export default Counter;

    ** useSelector 를 사용하면, 사용한 컴포넌트는 "자동으로 store 를 구독한다"
        그리고 자동으로, [항상 새로 업데이트된 State 를 받는다.] ***

6. 리액트 컴포넌트에서, dispatch 를 사용하여, action 보내, 상태를 컨트롤하기.[useDispatch] 

    "useDispatch" from "react-redux" 를 사용한다.

    import classes from "./Counter.module.css";
    import { useSelector, useDispatch } from "react-redux";

    const Counter = () => {
        const counter = useSelector((state) => state.counter);
        const dispatch = useDispatch();

        const toggleCounterHandler = () => {};

        const incrementHandler = () => {
            dispatch({ type: "INCREMENT" });
        };

        const decrementHandler = () => {
            dispatch({ type: "DECREMENT" });
        };

        return (
            <main className={classes.counter}>
                <h1>Redux Counter</h1>
                <div className={classes.value}>{counter}</div>
                <div>
                    <button onClick={incrementHandler}> 증가</button>
                    <button onClick={decrementHandler}> 감소 </button>
                </div>
                <button onClick={toggleCounterHandler}>Toggle Counter</button>
            </main>
        );
    };

    export default Counter;

7. 페이로드를 활용하여, 컴포넌트에서 유동적으로 조작가능한 Redux 만들기

    < store/index.js >

        if (action.type === "USERINPUT") {
            return {
            counter: state.counter + action.number,             // 컴포넌트로부터 받은 값을 동적으로 State 변화에 사용한다.
            };
        }

    < Counter.js >

        const userinputHandler = (number) => {
            dispatch({ type: "USERINPUT", number: number });        // 페이로드를 사용해, action 의 프로퍼티에 값을 넣어준다.
        };

        return (
            <main className={classes.counter}>
                    ...
                <button onClick={() => {userinputHandler(5);}}> 유저인풋 </button>
              </div>

    < 다른 방법 >

        const userinputHandler = () => {
            dispatch({ type: "USERINPUT", number: 5 });        // 함수 사용할때 말고, 이쪽에서도 지정 가능
        };
        
8. 추가적인 State 를 다루어보자.

    < 추가적인 State 사용법 >

        1. 초기 값을 빼서 사용 하는 편이 좋다 (당연하게도)

        2. 다른 State 들은 건드리지 않더라도, return 에 스스로를 return 해야한다.
            반환되는 값은 "새 return 으로 전부 교체된다."
                ** 새 return 은 절대로 "merge" 되지 않는다.
                ** 새 return 은 완전히 "overwrite" 될 뿐이다.
                ** 초기값을 지정하고, return 하지 않았다면 그 프로퍼티는 자동으로 "undefined" 가 된다.
        
        3. 다른 State 를 사용하고 싶다면, 그 State 도 사용하는 곳에서 참조하여 사용해야한다.


    < / store / index.js >
            
        import { createStore } from "redux";

        const initialState = { counter: 0, showCounter: false };    // 1. 초기값을 빼서 사용하는 편이 좋다.
        
        const counterReducer = (state = initialState, action) => {

            if (action.type === "INCREMENT") {
                return {
                    counter: state.counter + 1,
                    showCounter : state.showCounter       // 2. 반환되는 값은 "새 return 으로 전부 교체되므로" 사라지지 않기 위해서는, return 한다.
                };
            }
            if (action.type === "DECREMENT") {
                return {
                    counter: state.counter - 1,
                    showCounter : state.showCounter
                };
            }
            if (action.type === "USERINPUT") {
                return {
                    counter: state.counter + action.number,
                    showCounter : state.showCounter
                };
            }
            
            if(action.type ==="TOGGLE_COUNTER"){
                return{
                    counter : state.counter,
                    showCounter : !state.showCounter
                }
            }
            
            return state;
        };


    < Counter.js >

            ...

        const Counter = () => {
            const counter = useSelector((state) => state.counter);
            const showCounter = useSelector((state) => state.showCounter);      // 3. 다른 State 를 사용하고 싶다면, 그 State 도 사용하는 곳에서 참조하여 사용해야한다.
            
            const dispatch = useDispatch();

                ...

            
9. 가장 흔히하는 실수! 절대 원본의 state 를 변경하지 말 것!!
        
    : 리덕스는 반드시, State 를 조작할때, "새로운 객체를 복사하고, 생성해야한다." [ 기본 룰 ]

        import { createStore } from "redux"

        const initialState = {name : xx, age : yy}

        const reducerFn = (state = initialState, action)=>{
            if(action.type === "AGE_INCREMENT"){
                state.age = state.age + 1               //  바로 이것! 원본을 그대로 건드려버리고

                return{
                    name : state.name,
                    age : state.age                     // 다시 객체로 리턴하는 행위!
                }
            }
        }

        const store = createStore(reducerFn)

        export default store
 

    ** "객체" 와 "배열" 은 "참조값임을 명심하자" state.age 를 변경한 순간, "원본의 state 는 변형된다."

    ** 또한, 리덕스에서 state 를 직접 변경할 경우, "state 가 동기화되지 않거나, 얘기치 않은 버그가 발생 할 수 있다."
            

10. 리덕스를 사용할 때의 문제점

    1. 수십개의 State 를 한꺼번에 다루려면, 매번 모든 프로퍼티(State)를 가진 객체를 만들어  return 해야한다. 수십개씩. 유지보수가 가능할까?

    2. action.type 을 다룰때, "오타가 하나라도 발생하면, 작동이 되지 않는다." 오타나기 쉽다.

    3. 한 프로젝트를 여러명이 작업한다면, 수십개의 action 이 난무할텐데... 식별자 이름의 중복도 발생하기 쉽다.

    4. state 를 직접 건드릴 수도 있다. 실수로. 몇개씩 중첩된 값들이 있을때, 우리는 실수하기 쉽다.

        등등... 수많은 문제점이 있다.

    해결책? [Redux-Toolkit] 을 사용하면된다.

11. Redux-Toolkit

    https://redux-toolkit.js.org/introduction/getting-started

    npm install @reduxjs/toolkit

        ** 툴킷을 설치하면, 리덕스를 삭제한다. 이미 포함되어있다.

12. Redux-Toolkit의 장점1 : createSlice 를 통한 코드의 가독성 및 안정화 [ reducerFn 의 교체 ]

        import { createStore } from "redux" 
        import { createSlice } from "@reduxjs/toolkit";

        const initialState = {counter :0, showCounter: false}

        const counterSlice = createSlice({
            name: "counter",                // 1. reducerFn이 함수이름을 갖듯, "name 은 필수로 지정해야한다."
            initialState,                   // 2. "초기값도 반드시 지정해주도록한다."
            reducers :{                     // 3. reducers 프로퍼티에, 리듀서함수를 넣어주면된다.
                incremen(state){            // 4. 이때의 state는 항상 최신 값을 반환한다.
                    state.counter++         // 5. 원본에 직접 손을 대도, toolkit안의 다른 패키지가, 이것을 복사하여 사용하게 만든다. (안정화 = 원본 절대 변경 불가)
                }                           //       (return 할 필요도 없다. 당연히 모든 value 에 대하여, 사라지지 않게 하기 위한 return 도 필요 없다)
                decerment(state){
                    state.counter--
                }    
                increase(state, action){        // 6. action은 필요한 경우에만 써도 된다.

                    state.counter = state.counter + action.payload      // 7. action.payload 에 기본적으로 action 으로 온 값이 저장된다.
                }      
                toggleCounter(state){
                    state.showCounter = !state.showCounter
                }
            }
        })

        const store = createStore(counterSlice.reducer)    // 8. 이제, store 에 createSlice로 만든 슬라이스의 reducers 를 넣어준다.

        export default store


13. Redux-Toolkit의 장점2 : configureStore 를 통한, "여러 리듀서 통합"   [ createStore 의 교체 ]

    ===========================================================================================================

        import { createSlice, configureStore } from "@reduxjs/toolkit";     // 1. configureStore 로  교체

        const initialState = {counter :0, showCounter: false}

        const counterSlice = createSlice({
            name: "counter", 
            initialState, 
            reducers :{    
                incremen(state){
                    state.counter++  
                }      
                decerment(state){
                    state.counter--  
                }    
                increase(state, action){ 
                    state.counter = state.counter + action.payload
                }      
                toggleCounter(state){
                    state.showCounter = !state.showCounter
                }
            }
        })

        const store = configureStore({          // 2. 이제, store 에 createSlice로 만든 슬라이스의 reducer 를 넣어준다.
            reducer : counterSlice.reducer     // 3. configureStore 에 들어가는 객체의 프로퍼티는 "reducer" 단수이다.
        })    

        export default store

    ===================================================================================================

    ** "reducers 가 아니고" reducer 가 "단수" 인 이유 
            
        createStore 로 만들던, configureStore 로 만들던, "리덕스가 사용할(관리할) reducerFn(Slice)"은 "반드시 하나여야한다"

    ** 그럼 왜? configureStore 를 굳이 사용하는가?

        configureStore 는 "여러개의 Slice를 동시에 적용할 수 있다."

    ** 반드시 하나라고 했는데!

        configureStore 는 "여러개의 Slice 를 객체형태로 key 와 함께 넣으면, 알아서 merge 하여 하나롬 만들어준다."

    ** 여러개의 Slice 를 사용하는 configureStore

        const counterSlice = createSlice({
            ...
        })

        const newCounterSlice = createSlice({

        })
                ...

        const store = configureStore({
            reducer :   { counter : counterSlice.reducer,          // Slice 를 객체형태로 key 와 함께 넣는다.
                            newCounter : newCounterSlice.reducer
                            ...
                        }
        })

14. Redux-Toolkit의 장점3 : createSlice 를 통한, "안전한 액션의 생성과 사용" [ 액션 식별자(type이름)의 오타방지 ]

        createSlice 로 리듀서함수를 만들때, reducer 를 "지정"했다. 이 "action을 호출하면 이런 일이 일어날 것이다" 하고

        기존의 "redux"의 경우, 그대로 지정된 action 을 사용하기 위해, 컴포넌트 함수에서 react-redux 로 연결후, dispatch 를 통해 사용했다.

        하지만 "createSlice" 아직 "지정했을뿐 생성하지 않았다."

        그러므로, "액션 생성자 메서드" 를 이용하여 "액션을 생성할 것이다."

    [ createSlice 로 만든 Slice 에 접근하여, "actions 옵션"을 선택하게 되면, 내가 "지정"한 action 객체들이 쭉 나온다. 내가 할일은 선택하는 것 뿐이다.]

            counterSlice.actions.incremen
            counterSlice.actions.toggleCounter
            createSlice.actions."..."                // 지정한 것들이 자동완성으로 나온다.
                    ...



    [ 그러므로, 이 action 을 넘겨, 컴포넌트에서 사용 가능하게 만든다.]

        : store 뿐 아니라, 생성된 action 도 함께 넘겨준다.

        ===========================================================================

            import { createSlice, configureStore } from "@reduxjs/toolkit";

            const initialState = { counter: 0, showCounter: true };

            const counterSlice = createSlice({
                name: "counter",
                initialState,
                reducers: {
                    increment(state) {
                        state.counter++;
                    },
                    decrement(state) {
                        state.counter--;
                    },
                    userinput(state, action) {
                        state.counter = state.counter + action.payload;
                    },
                    toggleCounter(state) {
                        state.showCounter = !state.showCounter;
                    },
                },
            });

            const store = configureStore({
                reducer: counterSlice.reducer,
            });

            export const counterAction = counterSlice.actions       // 액션을 넘겨줄 counterAction을 export한다.

            export default store;


15. Redux-Toolkit의 장점4 : 컴포넌트에서, 자동완성으로 사용이 가능하다. 하나하나 칠 필요 없이

    <컴포넌트>

        import classes from "./Counter.module.css";
        import { useSelector, useDispatch } from "react-redux";
        import { counterAction } from "../store/index";

        const Counter = () => {
            const counter = useSelector((state) => state.counter);
            const showCounter = useSelector((state) => state.showCounter);

            const dispatch = useDispatch();

            const toggleCounterHandler = () => {
                dispatch(counterAction.toggleCounter());
            };

            const incrementHandler = () => {
                dispatch(counterAction.increment());
            };

            const decrementHandler = () => {
                dispatch(counterAction.decrement());
            };

            const userinputHandler = () => {
                dispatch(counterAction.userinput(5));       // ** payload 에 관하여
            };

            return (
                ...
            )

                    
[** payload 에 관하여]
        
        @reduxjs/toolkit 은 ,action 을 받아올때, 기본적으로 "payload 객체" 안에 저장되어 받아온다.

            [컴포넌트]
                const userinputHandler = () => {
                    dispatch(counterAction.userinput(5));       // ** payload 에 관하여
                };

                            이렇게 사용했다면

            [리듀서]
                payload = {5} 처럼 받아 오는 것이다.   (key는 모르겠다)

        "다른 예시로"

            [컴포넌트]
                const userinputHandler = () => {
                    dispatch(counterAction.userinput({inputNum : 5, myNum : 10 }));   
                };

                            이렇게 사용했다면

            [리듀서]
                payload = { inputNum : 5, myNum : 10 }

            [만약 inputNum 과 myNum 을 각각 사용하는 리듀서라면 ]

                increase(){
                    state.counter = state.counter + action.payload.inputNum + action.payload.myNum 
                }

        <정리>
            "기본적으로 reducer 를 만들때, action 파라미터의 인수"로 "payload" 프로퍼티를 받은것이다.

            userinput(state, action) {
                state.counter = state.counter + action.payload;     // "payload" 프로퍼티를 받은것이다.
            },
        

16. 다중 Slice 사용해보기

    <연습>

        0. "로그인 상태" 는 "전역" 으로 관리되어야 하는 "State"이다 => 완벽한 redux 의 조건!
        1. 로그인이 되면, 네비게이션 바가 변경된다.
        2. 로그인 필드가 사라지고 새 컴포넌트가 반영된다.

            => State 를 변경해야한다. "counterSlice 와는 전혀 다른 동작의 State를"

            => 결국 "새 Slice 를 생성"하여, "로그인에 대한 State를 조작"해야한다.

            => 다중 Slice(State 관리) 가 필요하다



        < redux-toolkit "/store/index.js" >==================================================================================

                import { createSlice, configureStore } from "@reduxjs/toolkit";

                const initialCounterState = { counter: 0, showCounter: true };
                const initialAuthState = { Authentication: false };
                
                const counterSlice = createSlice({
                name: "counter",
                initialState: initialCounterState,
                reducers: {
                    increment(state) {
                    state.counter++;
                    },
                    decrement(state) {
                    state.counter--;
                    },
                    userinput(state, action) {
                    state.counter = state.counter + action.payload;
                    },
                    toggleCounter(state) {
                    state.showCounter = !state.showCounter;
                    },
                },
                });
                
                const authSlice = createSlice({
                name: "auth",
                initialState: initialAuthState,
                reducers: {
                    login(state) {
                        state.Authentication = true;
                    },
                    logout(state) {
                        state.Authentication = false;
                    },
                },
                });
                
                const store = configureStore({
                    reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },  // 두개 이상의 Slice으로 store를 만든다.
                });
                
                export const counterAction = counterSlice.actions;
                
                export const authAction = authSlice.actions;        // 마찬가지로 컴포넌트에서, 리듀서함수 사용을 위한 actions 을 export 한다.
                
                export default store;

    
        < Header 컴포넌트 "/components/Header.js"> ==================================================================================

            1. loginState 가져오기
            2. loginState 변경하기

            <차이점>
                    기존은 store 를 만들때   "reducer : AuthSlice.reduce "  라고 했지만 
                    여러개를 사용한다면,    "reducer : { auth :  AuthSlice.reduce  ...}"  

                        이제는 "객체 안에 담아서 사용한다. (여러가지 reducer 이기 때문에)"

                    그러므로 값에 접근할때, 객체의 키를 적어주어야 한다

                        기존 : const authState = useSelector((state) => state.Authentication); 
                        현재 : const authState = useSelector((state) => state.auth.Authentication)

            <코드>

                import classes from "./Header.module.css";
                import { useDispatch, useSelector } from "react-redux";                 // 1. react와 redux 를 연결하는 dispatch 와 selector 을 불러온다.
                import { authAction } from "../store/index";                            // 2. auth State 변경을 위한 authAction 을 불러오고
                
                const Header = () => {
                    const authState = useSelector((state) => state.auth.Authentication);    // ** 3. state 중, "Authentication" State를 불러온다.
                    
                    const authDispatch = useDispatch();                                     // 4. dispatch 사용을 위한, useDispatch 를 호출한다.
                    
                    const logoutHandler = () => {
                        authDispatch(authAction.logout());
                    };
                    
                    return (
                        <header className={classes.header}>
                        <h1>Redux Auth</h1>
                        <nav>
                            <ul>
                            <li>
                                <a href="/">My Products</a>
                            </li>
                            <li>
                                <a href="/">My Sales</a>
                            </li>
                            <li>
                                {authState && <button onClick={logoutHandler}>Logout</button>}
                            </li>
                            </ul>
                        </nav>
                        </header>
                    );
                };
            
                export default Header;
                


        < Auth 컴포넌트 "/components/Auth.js" >==================================================================================

            <설명>

                redux 의 장점이 여기서 나온다. [전 애플리케이션에 하나의 State를 공급하는 것]

                Auth 컴포넌트에서, authState 를 변경하면, store 에 저장된 Slice 로 만든 authState 가 변경되고
                변경된 authState 는 Header 에서도, 그 어디에서도 적용되어, 앱 전반에 걸친 state가 동일하게 사용된다.
            
            <코드>
                import classes from "./Auth.module.css";
                import { useDispatch } from "react-redux";
                import { authAction } from "../store/index";

                const Auth = () => {
                    const authDispatch = useDispatch();

                    const loginHandler = (e) => {
                        e.preventDefault();
                        authDispatch(authAction.login());
                    };
                    return (
                        <main className={classes.auth}>
                        <section>
                            <form>
                            <div className={classes.control}>
                                <label htmlFor="email">Email</label>
                                <input type="email" id="email" />
                            </div>
                            <div className={classes.control}>
                                <label htmlFor="password">Password</label>
                                <input type="password" id="password" />
                            </div>
                            <button onClick={(e) => loginHandler(e)}>Login</button>
                            </form>
                        </section>
                        </main>
                    );
                };

                export default Auth;

17. 모든 Slice 를 한 파일에 전부 넣을수 없잖아? [ store 분할하기 ]

    1) Slice 분할, export
        
        < / store / "XXX.js" >

            import { createSlice } from "@reduxjs/toolkit";

            const initialAuthState = { Authentication: false };     // 분할

            const authSlice = createSlice({                         // 분할
                name: "auth",
                initialState: initialAuthState,
                reducers: {
                    login(state) {
                        state.Authentication = true;
                    },
                    logout(state) {
                        state.Authentication = false;
                    },
                },
            });

            export const authAction = authSlice.actions;        // Action 도 여기서 따로 분할

            export default authSlice.reducer;                   // default 로, reducer 를 내보낸다(Slice 자체를 내보내도 되지만 이게 좋다.)


    2) 합치기 [ rootReducer ]

        < / store / index.js >

        import { configureStore } from "@reduxjs/toolkit";

        import counterReducer from "./counter";                 // 불러오면 끝
        import authReducer  from "./auth";

        const store = configureStore({
            reducer: { counter: counterReducer, auth: authReducer },
        });


        export default store;

    3) 사용하기

        : 달라지는것은 하나다. "Action의 위치"

            결국 "저장소"는 "index.js 에 있는 rootReducer 단 하나" 가 될것이고 (반드시 reducer는 하나여야 하기 때문에)
            State는 전부, index.js 의 rootReducer 에서 "merge" 되어 "전부 index.js 안에 State가 존재 할 것이다."

            Action은 각각의 분할된 Slice 안에서 나오므로, Action을 참조하는 위치만 바뀌게 된다.

           
            <기존>
                import { authAction } from "../store/index";

                const Auth = () => {
                    const authDispatch = useDispatch();
                        ...
                }

            <분할 후>

                import { authAction } from "../store/auth";

                const Auth = () => {
                    const authDispatch = useDispatch();
                        ...
                }


                    
                            
                        

    


[취소선이 있다고요?]

    관계없다. 여전히 동작한다.

        블로그글 : https://velog.io/@201_steve/redux-createStore-deprecated
        원본 : https://github.com/reduxjs/redux/releases

    취소선이 보이는게 싫다면, 이름만 바꿔서 사용한다.

    import { legacy_createStor as createStore } from "redux";
