0. redux 공식홈페이지

    : https://ko.redux.js.org/introduction/getting-started

1. npm i redux

    : https://www.npmjs.com/package/redux

2. import redux

    import {createStore} from "redux"


[취소선이 있다고요?]

    관계없다. 여전히 동작한다.

        블로그글 : https://velog.io/@201_steve/redux-createStore-deprecated
        원본 : https://github.com/reduxjs/redux/releases

    취소선이 보이는게 싫다면, 이름만 바꿔서 사용한다.

    import { legacy_createStor as createStore } from "redux";
   

3. 저장소 생성, 리듀서 함수 생성

    * 리듀서 함수는 반드시 "순수한 함수"여야한다. 
        side-effect가 없어서, 힝싱 같은 인수를 넣으면 같은 값이 도출되게


4. 리듀서 함수를, 저장소의 파라미터에 넣어준다(동작하도록)

5. 구독자를 만들자. (리액트를 사용한다면, 실제 컴포넌트가 될것이다.)

6. 구독자(컴포넌트)와 store를 연결하자. store의 subscribe 메서드로, 컴포넌트를 연결한다.(연결 이라기보다는, store가 변경되면 함수를 실행하는 useEffect와같은 존재)

7. 컴포넌트 안에서, 저장소에 접근해, getState 함수로, 저장소의 값을 가져온다.

8. dispatch 로, action 을 보내고, 리듀서함수는 action 에 따라, 다른 조치를 취한다.

    const redux = require("redux");                                         // 1.  임포트하고

    const counterReducer = (state = { counter: 0 }, action) => {            // 3. 리듀서 함수(동작할 함수) 만들고 (state = 현재 상태)

        if(action.type === "increment"){
            return {
            counter: state.counter + 1,                                         // 4. 새로운 상태 를 return 하는 리듀서함수 완성 한다.
            };
        }
        if(action.type === "decrement"){
            return {
                counter: state.counter -1
            }
        }
        return
    };

    let store = redux.createStore(counterReducer);                          // 2. 저장소 만들어서   // 5. 저장소에, 리듀서 함수를 넣어, 상태를 조작

    const subScriber = () => {                                              // 6 구독자를 만들고, 저장소의 값을 가져와보자(추후 컴포넌트가 될것이다.)
        const latestState = store.getState();                                 
        console.log(latestState);
    };

    store.subscribe(subScriber);            // 7. "구독자"가, state 가 변경된 값을 얻기 위해, "subscribe 메서드를 사용한다."
                                            //  "subscribe"는, store의 변화가 일어날때, 그 함수(추후, 컴포넌트 즉 UI)가 실행된다.

    store.dispatch({ type: "increment" });      // 8. "특수한 값을 가진 action"을 "dispatch"로 "리듀서 함수"에 전달한다.

                                                // 9. 리듀서 함수에서는 action.type 으로 dispatch된 action 을 받고, 그에 따른 조치를 취한다. 

    store.dispatch({ type : "decrement" })      // 10. 리듀서 함수에서는 action.type 으로 dispatch된 action 을 받고, 그에 따른 조치를 취한다.                        
